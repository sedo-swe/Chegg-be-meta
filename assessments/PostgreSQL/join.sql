-- Create the employees table

DROP TABLE if exists employees;

CREATE TABLE employees
(
  employee_id INTEGER PRIMARY KEY generated by default AS identity,
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  phone VARCHAR(100),
  title VARCHAR(100),
  salary NUMERIC,
  hire_date DATE
);

select * from employees;

-- Create the departments table

DROP TABLE if exists departments;

CREATE TABLE departments
(
  department_id INTEGER PRIMARY KEY generated by default AS identity,
  department_name VARCHAR(100) NOT NULL,
  manager INTEGER REFERENCES employees(employee_id) unique -- Foreign key
);

/* The manager column stores the foreign keys from the employees table. 
  Setting it to unique ensures that each department is linked to only one manager, 
  thereby enforcing a one-to-one relationship. 
*/

-- Create the customers table

DROP TABLE if exists customers;

CREATE TABLE customers
(
  customer_id INTEGER PRIMARY KEY generated by default AS identity,
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  phone VARCHAR(100),
  email VARCHAR(100),
  street VARCHAR(255),
  city VARCHAR(100),
  zip_code VARCHAR(5)
);

-- Create the orders table

DROP TABLE if exists orders;

CREATE TABLE orders
(
  order_id INTEGER PRIMARY KEY generated by default AS identity,
	order_status INTEGER NOT NULL,
  order_date DATE NOT NULL,
	shipped_date DATE,
  customer_id INTEGER REFERENCES customers(customer_id) NOT NULL -- Foreign key
);

/* In the query above, you call the foreign key column customer_id 
  and have it reference the primary key column of the customers table (which is customer_id).
  This will enforce one-to-many relationship.
 */

-- Create the projects table

DROP TABLE if exists projects;

CREATE TABLE projects
(
  project_id INTEGER PRIMARY KEY generated by default AS identity,
  project_name VARCHAR(255) NOT NULL,
  budget NUMERIC DEFAULT 0,
  start_date DATE,
  end_date DATE
);

-- Create the employees_projects join table

DROP TABLE if exists employees_projects;

CREATE TABLE employees_projects
(
  employee_id INTEGER REFERENCES employees(employee_id),
  project_id INTEGER REFERENCES projects(project_id),
  start_date DATE,
  end_date DATE,
  PRIMARY KEY (employee_id, project_id) -- Composite key
);

/*
   Each row in the employees_projects table links an employee to a project through two foreign key columns 
  that reference primary keys from the employees and projects tables.
  
  Additionally, combining the employee_id 
  and project_id columns makes it possible to create a composite key. A composite key is a primary key 
  created from combining multiple columns to guarantee the uniqueness of a record. 
  Composite keys are useful when records in your dataset cannot be uniquely identified by a single column 
  value but a combination of column values can.
 */



-- Seeding the database
TRUNCATE
  employees,
  departments,
  projects,
  employees_projects,
  customers,
  orders
RESTART IDENTITY;

-- Insert some data into the employees table
INSERT INTO employees
  (first_name, last_name, phone, title, salary, hire_date)
  VALUES
    ('Jane', 'Doe','5551234', 'CEO', 80000, '12/07/1999'),
    ('Wright', 'Palmer', '5554321', 'Manager', 60000, '01/06/2001'),
    ('Jim', 'Doe', '5555678', 'Accountant', 50000, '11/06/2015'),
    ('Toby', 'Bestley', '5558765', 'Associate', 35000, '09/07/2008') ,
    ('Meredith', 'Hartford', '5559876', 'Associate', 30000, '02/17/2014'),
    ('Tom', 'Flenderson', '5558769', 'Associate', 32000, '11/23/2013'),
    ('Bently', 'Singh', '5554326', 'Manager', 60000, '06/06/2005'),
    ('Winnie', 'Lim', '5554527', 'Manager', 62000, '10/24/2003'),
    ('Ruda', 'Bross', '5554428', 'Manager', 66000, '11/06/2004');

-- Insert four projects into the projects table
INSERT INTO projects
  (project_name, budget, start_date,)
  VALUES
    ('Build Database', 20000, '3/4/2020'),
    ('Plan christmas party', 500, '11/20/2020'),
    ('Remove old stock', 1000, '4/6/2020'),
    ('Watch paint dry', 3000, '2/11/2020');

-- Insert some customers into the customers table
INSERT INTO customers
  (first_name, last_name, phone, email, street, city, zip_code)
  VALUES
    ('Kacie', 'Mckee','5555234', 'kacie.mckee@gmail.com', '61 Shadow Brook Court', 'Melrose, MA', '02176'),
    ('Moses', 'Mcghee', '5554651', 'moses.mcghee@gmail.com', '570 Old York St.', 'Upland, CA', '91784'),
    ('Jerome', 'Aguilar', '5555699', 'jerome.aguilar@yahoo.com', '68 Victoria Road', 'Hoboken, NJ', '07030'),
    ('Ainsley', 'Bonner', '5558564', 'ainsley.bonner@hotmail.com', '60 Winchester Road', 'Dundalk, MD', '21222') ,
    ('Delilah', 'Bateman', '5523124', 'delilah.bateman@gmail.com', '482 E. Oxford St.', 'Thibodaux, LA', '70301');
 
 
INSERT INTO departments
  (department_name, manager)
  VALUES
    ('Administration', 2),
    ('Merchandising', 7),
    ('Customer Service', 8),
    ('Marketing', 9);

-- dup key (employee_id): INSERT INTO departments (department_name, manager) VALUES ('New Department', 2);
   
INSERT INTO orders
  (order_status, order_date, shipped_date, customer_id)
  VALUES
    (1, '3/4/2020', NULL, 1),
    (2, '3/14/2020', NULL, 2),
    (4, '4/2/2020', '4/5/2020', 1),
    (4, '4/5/2020', '4/14/2020', 3),
    (3, '4/5/2020', NULL, 3),
    (4, '4/17/2020', '4/20/2020', 4),
    (3, '5/1/2020', NULL, 1),
    (4, '5/2/2020', '5/14/2020', 5),
    (3, '5/15/2020', NULL, 2);
   
-- Assign employees to projects
INSERT INTO employees_projects
  (employee_id, project_id, start_date, end_date)
  VALUES
    (7, 1, '3/4/2020', '6/1/2020'),
    (6, 2, '11/20/2020', '12/25/2020'),
    (7, 3, '4/6/2020', '4/12/2020'),
    (4, 4, '2/11/2020', '2/15/2020'),
    (7, 4, '2/25/2020', '3/15/2020'),
    (2, 4, '2/11/2020', '2/25/2020'),
    (1, 4, '2/15/2020', '4/12/2020');
    
-- JOIN queries
SELECT *
FROM departments
  JOIN employees
  ON departments.manager = employees.employee_id;

-- It is also recommended to qualify all column names with the table name;
-- that is, `employees.salary` rather than just `salary`.
SELECT
  departments.department_id,
  departments.department_name,
  employees.first_name,
  employees.last_name,
  employees.salary
FROM
  departments
  JOIN employees
  ON departments.manager = employees.employee_id;

-- Create table aliases
SELECT
  d.department_id,
  d.department_name,
  e.first_name,
  e.last_name,
  e.salary
FROM
  departments d -- Create alias `d` for the departments table
  JOIN employees e -- Create alias `e` for the employees table
  ON d.manager = e.employee_id;

-- INNER JOIN queries
INSERT INTO departments
  (department_name)
VALUES
  ('Sales');