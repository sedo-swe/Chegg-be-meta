/*************************************************************************************/
-- One-to-one relationship between the employees and departments tables

-- Create the employees table
DROP TABLE if exists employees;

CREATE TABLE employees
(
  employee_id INTEGER PRIMARY KEY generated by default AS identity,
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  phone VARCHAR(100),
  title VARCHAR(100),
  salary NUMERIC,
  hire_date DATE
);

-- Create the departments table
DROP TABLE if exists departments;

CREATE TABLE departments
(
  department_id INTEGER PRIMARY KEY generated by default AS identity,
  department_name VARCHAR(100) NOT NULL,
  manager INTEGER REFERENCES employees(employee_id) unique -- Foreign key
);

/*
    The manager column stores the foreign keys from the employees table. 
    Setting it to unique ensures that each department is linked to only one manager, 
    thereby enforcing a one-to-one relationship.
*/

INSERT INTO departments
  (department_name, manager)
  VALUES
    ('Administration', 2),
    ('Customer Service', 8),
    ('Marketing', 9);


/*************************************************************************************/
-- One-to-many relationship between the customers and orders tables

-- Create the customers table
DROP TABLE if exists customers;

CREATE TABLE customers
(
    customer_id INTEGER PRIMARY KEY generated by default AS identity,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    phone VARCHAR(100),
    email VARCHAR(100),
    street VARCHAR(255),
    city VARCHAR(100),
    zip_code VARCHAR(5)
);

-- Create the orders table
DROP TABLE if exists orders;

CREATE TABLE orders
(
    order_id INTEGER PRIMARY KEY generated by default AS identity,
	order_status INTEGER NOT NULL,
    order_date DATE NOT NULL,
	shipped_date DATE,
    sipping_status boolean default 'Not Yet',
    customer_id INTEGER REFERENCES customers(customer_id) NOT NULL -- Foreign key
);

/*
    In the query above, you call the foreign key column customer_id and 
    have it reference the primary key column of the customers table (which is customer_id).
*/

INSERT INTO orders
  (order_status, order_date, shipped_date, customer_id)
  VALUES
    (1, '3/4/2020', NULL, 1),
    (4, '5/2/2020', '5/14/2020', 5),
    (3, '5/15/2020', NULL, 2);


/*************************************************************************************/
-- Many-to-many relationship between the employees and projects tables

-- Create the projects table
DROP TABLE if exists projects;

CREATE TABLE projects
(
  project_id INTEGER PRIMARY KEY generated by default AS identity,
  project_name VARCHAR(255) NOT NULL,
  budget NUMERIC DEFAULT 0,
  start_date DATE,
  end_date DATE
);

-- Create the employees_projects join table
DROP TABLE if exists employees_projects;

CREATE TABLE employees_projects
(
  employee_id INTEGER REFERENCES employees(employee_id),
  project_id INTEGER REFERENCES projects(project_id),
  start_date DATE,
  end_date DATE,
  PRIMARY KEY (employee_id, project_id) -- Composite key
);

/*
    Each row in the employees_projects table links an employee to a project through two foreign key columns 
    that reference primary keys from the employees and projects tables.

    Additionally, combining the employee_id and project_id columns makes it possible to create a composite key. 
    A composite key is a primary key created from combining multiple columns to guarantee the uniqueness of a record. 
    Composite keys are useful when records in your dataset cannot be uniquely identified by a single column value 
    but a combination of column values can.
*/

-- Assign employees to projects
INSERT INTO employees_projects
  (employee_id, project_id, start_date, end_date)
  VALUES
    (7, 1, '3/4/2020', '6/1/2020'),
    (7, 4, '2/25/2020', '3/15/2020'),
    (2, 4, '2/11/2020', '2/25/2020'),
    (1, 4, '2/15/2020', '4/12/2020');




-- Truncate a table
TRUNCATE
  tableA,
  tableB,
  tableC
RESTART IDENTITY;